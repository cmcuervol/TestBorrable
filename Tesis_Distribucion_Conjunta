#!/usr/bin/env python
# -*- coding: utf-8 -*-
import pandas as pd
from datetime import datetime, timedelta
import numpy as np
from scipy.stats import pearsonr
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.ticker as tck
import matplotlib.cm as cm
import matplotlib.font_manager as fm
import math as m
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
import matplotlib.transforms as transforms
import matplotlib.colors as colors
import netCDF4 as nc
from netCDF4 import Dataset
import seaborn as sns; sns.set(style="white",color_codes=True)
import os
#-----------------------------------------------------------------------------
# Motivación codigo -----------------------------------------------------------

'Se desarrollará la distribución conjunta y el correlograma de la información de'
'CH2 GOES y de radiación de los piranometros, sobre los 3 puntos de medición porq'
'se toman los pixeles sobre el los q hay medición de radiaicón. Inicialmente se'
'toman los datos dentro del periodo del registro del experimento. Luego se puede'
'plantear para un horizonte histórico o de 2018. Inicialmente se hace tambien '
'la agrupación a la resolución dell satélite para mejorar las relaciones.'

Theoric_Model = 'GIS'   ##---> 'GIS' para que coja el de Gis o 'Piranometro' para que tome el de el piranometro
fi_m = 3
fi_d = 20
ff_m = 8
ff_d = 22

##############################################################################
#-----------------------------------------------------------------------------
# Rutas para las fuentes -----------------------------------------------------
##############################################################################

prop = fm.FontProperties(fname='/home/nacorreasa/SIATA/Cod_Califi/AvenirLTStd-Heavy.otf' )
prop_1 = fm.FontProperties(fname='/home/nacorreasa/SIATA/Cod_Califi/AvenirLTStd-Book.otf')
prop_2 = fm.FontProperties(fname='/home/nacorreasa/SIATA/Cod_Califi/AvenirLTStd-Black.otf')
#############################################################################################################
## -------------------------LECTURA DE LOS DATOS DE GOES CH2 DURANTE EL 2018-------------------------------##
#############################################################################################################
##---------------------------------------------------------------------------------------------------------##
ds = Dataset('/home/nacorreasa/Maestria/Datos_Tesis/GOES/GOES_nc_CREADOS/GOES_VA_C2_2019_0320_0822.nc')


lat = ds.variables['lat'][:, :]
lon = ds.variables['lon'][:, :]
Rad = ds.variables['Radiancias'][:, :, :]

                   ## -- Obtener el tiempo para cada valor

tiempo = ds.variables['time']
fechas_horas = nc.num2date(tiempo[:], units=tiempo.units)
for i in range(len(fechas_horas)):
    fechas_horas[i] = fechas_horas[i].strftime('%Y-%m-%d %H:%M')

fechas_horas = pd.to_datetime(fechas_horas, format="%Y-%m-%d %H:%M", errors='coerce')

def time_mod(time, delta, epoch=None):
    if epoch is None:
        epoch = datetime.datetime(1970, 1, 1, tzinfo=time.tzinfo)
    return (time - epoch) % delta

def time_round(time, delta, epoch=None):
    mod = time_mod(time, delta, epoch)
    if mod < (delta / 2):
       return time - mod
    return time + (delta - mod)
import datetime
fechas_horas = [time_round(fechas_horas[i], datetime.timedelta(minutes=10)) for i in range(len(fechas_horas))]
#fechas_horas = fechas_horas.round('10Min')

################################################################################################
##-------------------INCORPORANDO EL ARRAY DEL ZENITH PARA CADA HORA--------------------------##
################################################################################################

def Aclarado_visible(Path_Zenith, Path_Fechas, Rad, fechas_horas):
    Z = np.load(Path_Zenith)
    Fechas_Z = np.load(Path_Fechas)

    daily_hours = np.arange(5, 19, 1)
    Zenith = []
    Fechas_Zenith = []
    for i in range(len(Fechas_Z)):
        if Fechas_Z[i].hour in daily_hours:
            Zenith.append(Z[i, :, :])
            Fechas_Zenith.append(Fechas_Z[i])
        elif Fechas_Z[i].hour not in daily_hours:
            pass
    Zenith = np.array(Zenith)

    Rad_clear = []
    for i in range(len(Fechas_Zenith)):
        for j in range(len(fechas_horas)):
            if Fechas_Zenith[i].hour ==  fechas_horas[j].hour and Fechas_Zenith[i].day ==  fechas_horas[j].day:
                Rad_clear.append(Rad[j, :, :]/np.cos(Zenith[i, :, :]))
            else:
                pass
    Rad_clear = np.array(Rad_clear)
    return Rad

Rad_Z = Aclarado_visible('/home/nacorreasa/Maestria/Datos_Tesis/hourlyZenith2018.npy', '/home/nacorreasa/Maestria/Datos_Tesis/DatesZenith.npy', Rad, fechas_horas)
del Rad

Rad = Rad_Z

                   ## -- Selección del pixel de la TS y creación de DF
lat_index_975 = np.where((lat[:, 0] > 6.25) & (lat[:, 0] < 6.26))[0][0]
lon_index_975 = np.where((lon[0, :] < -75.58) & (lon[0, :] > -75.59))[0][0]
Rad_pixel_975 = Rad[:, lat_index_975, lon_index_975]

Rad_df_975 = pd.DataFrame()
Rad_df_975['Fecha_Hora'] = fechas_horas
Rad_df_975['Radiacias'] = Rad_pixel_975
Rad_df_975['Fecha_Hora'] = pd.to_datetime(Rad_df_975['Fecha_Hora'], format="%Y-%m-%d %H:%M", errors='coerce')
Rad_df_975.index = Rad_df_975['Fecha_Hora']
Rad_df_975 = Rad_df_975.drop(['Fecha_Hora'], axis=1)

                   ## -- Selección del pixel de la CI
lat_index_350 = np.where((lat[:, 0] > 6.16) & (lat[:, 0] < 6.17))[0][0]
lon_index_350 = np.where((lon[0, :] < -75.64) & (lon[0, :] > -75.65))[0][0]
Rad_pixel_350 = Rad[:, lat_index_350, lon_index_350]

Rad_df_350 = pd.DataFrame()
Rad_df_350['Fecha_Hora'] = fechas_horas
Rad_df_350['Radiacias'] = Rad_pixel_350
Rad_df_350['Fecha_Hora'] = pd.to_datetime(Rad_df_350['Fecha_Hora'], format="%Y-%m-%d %H:%M", errors='coerce')
Rad_df_350.index = Rad_df_350['Fecha_Hora']
Rad_df_350 = Rad_df_350.drop(['Fecha_Hora'], axis=1)


                   ## -- Selección del pixel de la JV
lat_index_348 = np.where((lat[:, 0] > 6.25) & (lat[:, 0] < 6.26))[0][0]
lon_index_348 = np.where((lon[0, :] < -75.54) & (lon[0, :] > -75.55))[0][0]
Rad_pixel_348 = Rad[:, lat_index_348, lon_index_348]

Rad_df_348 = pd.DataFrame()
Rad_df_348['Fecha_Hora'] = fechas_horas
Rad_df_348['Radiacias'] = Rad_pixel_348
Rad_df_348['Fecha_Hora'] = pd.to_datetime(Rad_df_348['Fecha_Hora'], format="%Y-%m-%d %H:%M", errors='coerce')
Rad_df_348.index = Rad_df_348['Fecha_Hora']
Rad_df_348 = Rad_df_348.drop(['Fecha_Hora'], axis=1)

Rad_df_348_h = Rad_df_348
Rad_df_350_h = Rad_df_350
Rad_df_975_h = Rad_df_975

Rad_df_348_h = Rad_df_348_h.between_time('06:00', '17:59')
Rad_df_350_h = Rad_df_350_h.between_time('06:00', '17:59')
Rad_df_975_h = Rad_df_975_h.between_time('06:00', '17:59')

################################################################################
##------------------LECTURA DE LOS DATOS DEL EXPERIMENTO----------------------##
################################################################################

df_P975 = pd.read_csv('/home/nacorreasa/Maestria/Datos_Tesis/Experimentos_Panel/Panel975.txt',  sep=',', index_col =0)
df_P350 = pd.read_csv('/home/nacorreasa/Maestria/Datos_Tesis/Experimentos_Panel/Panel350.txt',  sep=',', index_col =0)
df_P348 = pd.read_csv('/home/nacorreasa/Maestria/Datos_Tesis/Experimentos_Panel/Panel348.txt',  sep=',', index_col =0)

df_P975['Fecha_hora'] = df_P975.index
df_P350['Fecha_hora'] = df_P350.index
df_P348['Fecha_hora'] = df_P348.index

df_P975.index = pd.to_datetime(df_P975.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')
df_P350.index = pd.to_datetime(df_P350.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')
df_P348.index = pd.to_datetime(df_P348.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')

## ----------------ACOTANDO LOS DATOS A VALORES VÁLIDOS---------------- ##

'Como en este caso lo que interesa es la radiacion, para la filtración de los datos, se'
'considerarán los datos de potencia mayores o iguales a 0, los que parecen generarse una'
'hora despues de cuando empieza a incidir la radiación.'

df_P975 = df_P975[(df_P975['radiacion'] > 0) & (df_P975['strength'] >=0) & (df_P975['NI'] >=0)]
df_P350 = df_P350[(df_P350['radiacion'] > 0) & (df_P975['strength'] >=0) & (df_P975['NI'] >=0)]
df_P348 = df_P348[(df_P348['radiacion'] > 0) & (df_P975['strength'] >=0) & (df_P975['NI'] >=0)]

df_P975_h = df_P975.groupby(pd.Grouper(level='fecha_hora', freq='10Min')).mean()
df_P350_h = df_P350.groupby(pd.Grouper(level='fecha_hora', freq='10Min')).mean()
df_P348_h = df_P348.groupby(pd.Grouper(level='fecha_hora', freq='10Min')).mean()

df_P975_h = df_P975_h.between_time('06:00', '17:59')
df_P350_h = df_P350_h.between_time('06:00', '17:59')
df_P348_h = df_P348_h.between_time('06:00', '17:59')

##############################################################################
## ----------------LECTURA DE LOS DATOS DE RADIACION TEORICA--------------- ##
##############################################################################

if Theoric_Model == 'Piranometro':
    df_Theoric = pd.read_csv("/home/nacorreasa/Maestria/Datos_Tesis/RadiacionTeorica_DataFrames/df_PIR.csv",  sep=',', index_col =0)
    df_Theoric.index = pd.to_datetime(df_Theoric.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')

    df_Theoric = df_Theoric[(df_Theoric.index.date >= pd.to_datetime('2019-'+str(fi_m)+ '-'
                +str(fi_d)).date()) & (df_Theoric.index .date<= pd.to_datetime('2019-'+str(ff_m)+ '-'+str(ff_d)).date())]

elif Theoric_Model == 'GIS':
    df_Theoric = pd.read_csv("/home/nacorreasa/Maestria/Datos_Tesis/RadiacionTeorica_DataFrames/df_GIS.csv",  sep=',', index_col =0)
    df_Theoric.index = pd.to_datetime(df_Theoric.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')

    df_Theoric = df_Theoric[(df_Theoric.index.date >= pd.to_datetime('2019-'+str(fi_m)+ '-'
                +str(fi_d)).date()) & (df_Theoric.index .date<= pd.to_datetime('2019-'+str(ff_m)+ '-'+str(ff_d)).date())]

################################################################################
##-------------------UNION DE LOS DOS CONJUNTOS DE DATOS----------------------##
################################################################################

df_Total_P975 = pd.concat([df_P975_h, Rad_df_975_h], axis = 1)
df_Total_P350 = pd.concat([df_P350_h, Rad_df_350_h], axis = 1)
df_Total_P348 = pd.concat([df_P975_h, Rad_df_348_h], axis = 1)

df_Total_P975.columns = ['Voltaje', 'Radiacion', 'Potencia', 'Reflectancias']
df_Total_P350.columns = ['Voltaje', 'Radiacion', 'Potencia', 'Reflectancias']
df_Total_P348.columns = ['Voltaje', 'Radiacion', 'Potencia', 'Reflectancias']

#####################################################################################
## ---------------------------INDICE DE CIELO DESPEJADO--------------------------- ##
#####################################################################################

"Como la radiacion teorica viene  a una vevntana horaria, entonces el indice de claridad tendrá "
"que calcularse con los datos a ventana horaria."

df_Total_P975_h = df_Total_P975.groupby(pd.Grouper(freq="H")).mean()
df_Total_P350_h = df_Total_P350.groupby(pd.Grouper(freq="H")).mean()
df_Total_P348_h = df_Total_P348.groupby(pd.Grouper(freq="H")).mean()

df_Total_P975_h['Kt*'] =  df_Total_P975_h['Radiacion']/ df_Theoric['Rad_teo_975']
df_Total_P350_h['Kt*'] =  df_Total_P350_h['Radiacion']/ df_Theoric['Rad_teo_350']
df_Total_P348_h['Kt*'] =  df_Total_P348_h['Radiacion']/ df_Theoric['Rad_teo_348']

## ----------------ACOTANDO LOS DATOS A VALORES VÁLIDOS---------------- ##

df_Total_P975_h =  df_Total_P975_h[df_Total_P975_h['Kt*'] <= 1]
df_Total_P350_h =  df_Total_P350_h[df_Total_P350_h['Kt*'] <= 1]
df_Total_P348_h =  df_Total_P348_h[df_Total_P348_h['Kt*'] <= 1]

#####################################################################################
##-------------------CORRELOGRAMA ENTRE NUBOSIDAD Y RADIACIÓN----------------------##
#####################################################################################


hexplot = sns.jointplot(x='Radiacion', y='Reflectancias', data=df_Total_P975, kind="hex",  vmin=0, vmax=65 )
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma entre radiación y nobosidad en TS', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD975.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD975.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

hexplot = sns.jointplot(x='Radiacion', y='Reflectancias', data=df_Total_P350, kind="hex" ,  vmin=0, vmax=65)
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma entre radiación y nobosidad en CI', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD350.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD350.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

hexplot = sns.jointplot(x='Radiacion', y='Reflectancias', data=df_Total_P348, kind="hex",  vmin=0, vmax=65)
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma entre radiación y nobosidad en JV', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD348.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_RAD348.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

#####################################################################################
##-------------------CORRELOGRAMA ENTRE NUBOSIDAD E INDICE KT*---------------------##
#####################################################################################
"Se hace con los datos remuestrados a horarios por que el índice se calcula a una tasa horaria ya que proviene del la"
"radiacion teorica del modelo de Gisel."

hexplot = sns.jointplot(x='Kt*', y='Reflectancias', data=df_Total_P975_h, kind="hex",  vmin=0, vmax=65 )
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma horario entre índice Kt* y nobosidad en TS', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*975.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*975.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

hexplot = sns.jointplot(x='Kt*', y='Reflectancias', data=df_Total_P350_h, kind="hex" ,  vmin=0, vmax=65)
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma horario entre índice Kt* y nobosidad en CI', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*350.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*350.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

hexplot = sns.jointplot(x='Kt*', y='Reflectancias', data=df_Total_P348_h, kind="hex",  vmin=0, vmax=65)
plt.subplots_adjust(top=0.55)
hexplot.fig.suptitle(u'Correlograma horario entre índice Kt* y nobosidad en JV', fontproperties = prop)
plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
cbar_ax = hexplot.fig.add_axes([.85, .25, .05, .4])
plt.colorbar(cax=cbar_ax, label = u"Conteos en un bin")
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*348.png')
plt.close('all')
os.system('scp /home/nacorreasa/Escritorio/Figuras/CorrelogramaConjuntoTotalRegistroREFLEC_KT*348.png nacorreasa@192.168.1.74:/var/www/nacorreasa/Graficas_Resultados/Estudio')

##########################################################################################################
##-------------------TABLA CON LA DISTRICUIÓN CONJUNTA ENTRE NUBOSIDAD Y RADIACIÓN----------------------##
##########################################################################################################
'Por medio de la funcion np.histogramdd se calcula la densidad de probabilidad o histograma del array de las'
'dos variables, donde la primera dimensión del array resultlante corresponde a los X histogrameados (osea que'
'el resultado corresponde a la primera dimension) y los histogrameados en los  Y de entrada, corresponden a la'
'segunda dimensión del resultado.'

numBins = 10

data975 = df_Total_P975[[ 'Reflectancias', 'Radiacion']]
data975 = data975.dropna()
jointProbs975, edges975 = np.histogramdd(np.array(data975.values), bins=numBins)
jointProbs975 /= jointProbs975.sum()
plt.imshow(jointProbs975)

data350 = df_Total_P350[[ 'Reflectancias', 'Radiacion']]
data350 = data350.dropna()
jointProbs350, edges350 = np.histogramdd(np.array(data350.values), bins=numBins)
jointProbs350 /= jointProbs350.sum()
plt.imshow(jointProbs350)

data348 = df_Total_P348[[ 'Reflectancias', 'Radiacion']]
data348 = data348.dropna()
jointProbs348, edges348 = np.histogramdd(np.array(data348.values), bins=numBins)
jointProbs348 /= jointProbs348.sum()
plt.imshow(jointProbs348)

fig = plt.figure(figsize=[10, 8])
gs = fig.add_gridspec(nrows=1, ncols= 3)
ax1 = fig.add_subplot( gs[0, 0])
cax1 = ax1.imshow(jointProbs975, cmap='viridis', vmin=0, vmax=0.055)
ax1.set_title('Correlograma en TS', fontsize = 10, fontproperties = prop)
ax1.set_ylabel(u'Radiación', fontsize = 9, fontproperties = prop_1)
ax1.set_xlabel('Reflectancias', fontsize = 9, fontproperties = prop_1)
for y in range(jointProbs975.shape[0]):
    for x in range(jointProbs975.shape[1]):
        plt.text(x + 0.15, y + 0.15, '%.2f' % jointProbs975[y, x],
                 horizontalalignment='center',verticalalignment='center', fontsize=4, color = 'white')
ax1.set_xticklabels([])
ax1.set_yticklabels([])


ax2 = fig.add_subplot(gs[0, 1])
cax2 = ax2.imshow(jointProbs350, cmap='viridis', vmin=0, vmax=0.055)
ax2.set_title('Correlograma en CI', fontsize = 10, fontproperties = prop)
ax2.set_ylabel(u'Radiación', fontsize = 9, fontproperties = prop_1)
ax2.set_xlabel('Reflectancias', fontsize = 9, fontproperties = prop_1)
for y in range(jointProbs350.shape[0]):
    for x in range(jointProbs350.shape[1]):
        plt.text(x + 0.15, y + 0.15, '%.2f' % jointProbs350[y, x],
                 horizontalalignment='center',verticalalignment='center', fontsize=4, color = 'white')
ax2.set_xticklabels([])
ax2.set_yticklabels([])

ax3 = fig.add_subplot(gs[0, 2])
cax3 = ax3.imshow(jointProbs348, cmap='viridis', vmin=0, vmax=0.055)
ax3.set_title('Correlograma en JV', fontsize = 10, fontproperties = prop)
ax3.set_ylabel(u'Radiación', fontsize = 9, fontproperties = prop_1)
ax3.set_xlabel('Reflectancias', fontsize = 9, fontproperties = prop_1)
for y in range(jointProbs348.shape[0]):
    for x in range(jointProbs348.shape[1]):
        plt.text(x + 0.15, y + 0.15, '%.2f' % jointProbs348[y, x],
                 horizontalalignment='center',verticalalignment='center', fontsize=4, color = 'white')
ax3.set_xticklabels([])
ax3.set_yticklabels([])

#plt.title(u'Correlaciones entre variables condicionantes en los 3 puntos', fontproperties = prop_1, fontsize= 13)
fig.subplots_adjust(right=0.8)
cbar_ax = fig.add_axes([0.85, 0.35, 0.05, 0.30])
fig.colorbar(cax3, label = u"Probabilidad conjunta", cax=cbar_ax)
plt.subplots_adjust(wspace=0.3)
plt.savefig('/home/nacorreasa/Escritorio/Figuras/CorrrelogramaRadNub.png')
plt.show()
